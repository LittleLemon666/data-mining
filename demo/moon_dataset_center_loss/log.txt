IMAGE_PATH = './output_image/'
MODEL_PATH = 'encoder_model'
# init loop
INIT_EPOCH = 30

INIT_EBCODER_LR = 0.01
INIT_DECODER_LR = 0.005

# train loop
EPOCH = 50
ITER = 5

ENCODER_LR = 0.01
DECODER_LR = 0.005

SCHEDULER_STEP = 10
SCHEDULER_GAMMA = 0.9

# epoch every LAMBDA_STEP, lambda *= LAMBDA_GAMMA
LAMBDA = 0.001
LAMBDA_STEP = 10
LAMBDA_MAX = 1
LAMBDA_GAMMA = 1.2

# center loss
WITH_CENTER_LOSS = True
CENTER = 0.0002 # weight
K_CENTER = 2

# number of sample
N = 1000
BATCH_SIZE = 64
x_dim = 2 # X
y_dim = 2 # U
embedding_dim = x_dim

DEBUG = False

# gif
SAVE_GIF = True
SAVE_STEP = 5


# check_U mode, input dimension(1d, 2d, 3d)(split by space) show U graph
CHECK_U = False

------------
dataset: moon, k = 2
acc: 1.0
model: kernelEncoder(
  (net): deepNetwork(
    (fc): Sequential(
      (0): Linear(in_features=2, out_features=64, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
      (2): Linear(in_features=64, out_features=128, bias=True)
      (3): LeakyReLU(negative_slope=0.01)
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): LeakyReLU(negative_slope=0.01)
      (6): Linear(in_features=128, out_features=128, bias=True)
      (7): LeakyReLU(negative_slope=0.01)
      (8): Linear(in_features=128, out_features=2, bias=True)
    )
  )
)